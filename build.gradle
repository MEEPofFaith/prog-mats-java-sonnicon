plugins{
    id "java"
    id "idea"
}

group pGroup

sourceSets.main{
    java.srcDir("src/")
    resources.srcDir("assets/")
}

sourceCompatibility = 16
targetCompatibility = 8

repositories{
    mavenCentral()
    maven{url "https://jitpack.io"}
}

dependencies{
    compileOnly "com.github.Anuken.Mindustry:core:$mindustryVersion"

    compileOnly "com.github.bsideup.jabel:jabel-javac-plugin:$jabelVersion"
    annotationProcessor "com.github.bsideup.jabel:jabel-javac-plugin:$jabelVersion"
}

ext{
    isWindows = {
        return System.getProperty("os.name").toLowerCase(Locale.ROOT).contains("windows")
    }
}

jar{
    archiveFileName.set "${pArtifactFilename}Desktop.jar"

    from{
        configurations.runtimeClasspath.collect{
            it.isDirectory() ? it : zipTree(it)
        }
    }
}

compileJava{
    options.incremental = true
    options.encoding = 'UTF-8'
    options.compilerArgs += '-Xlint:deprecation'

    options.fork = true
    options.forkOptions.jvmArgs += [
            '--add-opens=jdk.compiler/com.sun.tools.javac.code=ALL-UNNAMED',
            '--add-opens=jdk.compiler/com.sun.tools.javac.parser=ALL-UNNAMED'
    ]

    if(JavaVersion.current() != JavaVersion.VERSION_1_8) {
        options.compilerArgs += ['--release', '8']
    }
}

task alphableed doFirst{
    exec{
        workingDir "$rootDir"

        println "Alpha-bleeding sprites..."
        if(isWindows()){
            commandLine("cmd", "/c", "alpha-bleeding-windows.exe", "--replace", "./assets/sprites/")
        }else{
            commandLine("./alpha-bleed", "./assets/sprites/")
        }
    }
}

task dexify(type: Jar){
    archiveFileName.set "${pArtifactFilename}Dexed.jar"

    final File jarArtifact = new File(tasks.jar.archiveFile.get().asFile.parent, "${pArtifactFilename}Desktop.jar"),
                dexedArtifact = new File(tasks.dexify.getTemporaryDir(), "Dexed.jar")

    doFirst{
        exec{
            workingDir dexedArtifact.parent
            def command = ["d8", "--min-api", pMinApi, "--output", dexedArtifact, jarArtifact]
            if(isWindows()){
                commandLine("cmd", "/c", *command)
            }else{
                commandLine(*command)
            }
        }
    }

    from(zipTree(jarArtifact), zipTree(dexedArtifact))
}

task bleedBuild dependsOn "alphableed", "build"

task buildDex dependsOn "build", "dexify"

task bleedBuildDex dependsOn "alphableed", "buildDex"